class Solution {
    private int bfs(int[][] graph, Set<Integer> infected) {
        Set<Integer> bad = new HashSet<>(infected);
        Queue<Integer> q = new LinkedList<>();
        for(Integer initialInfected : infected) q.add(initialInfected);
        while(!q.isEmpty()){
            Integer next = q.remove();
            for(int i=0;i<graph[next].length;i++){
                if(graph[next][i]==1 && !bad.contains(i)){
                    bad.add(i);
                    q.add(i);
                }
            }
        }
        return bad.size();
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        Set<Integer> infected = new HashSet<>();
        for(int initialInfected: initial){
            infected.add(initialInfected);
        }
        int n = graph.length, ans = initial[0], max = Integer.MAX_VALUE;
        for(int u: initial) {  
            infected.remove(u);     
            int count = bfs(graph, infected);
            if(count < max) {
                max = count;
                ans = u;
            } 
            infected.add(u);         
        }
        return ans;
    }
}