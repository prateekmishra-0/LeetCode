import java.util.Arrays;

class Solution {
    static int MAXN = 90001;
    static int[] head = new int[300];
    static int[] next = new int[MAXN];
    static int[] to = new int[MAXN];
    static boolean[] seen = new boolean[300];
    static int cnt, n, count;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        n = graph.length;
        build();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(i == j)continue;
                if(graph[i][j] == 1)insert(i,j);
            }
        }
        int m = initial.length;
        int min = Integer.MAX_VALUE, ans = Integer.MAX_VALUE;

        for (int i = 0, curr; i < m; i++) {
            curr = initial[i];
            Arrays.fill(seen,0,n,false);
            count=0;
            seen[curr] = true;
            for (int j : initial) {
                if(j == curr || seen[j])continue;
                f(j);
            }
            if(min >= count){
                if(min > count || ans > curr){
                    min = count;
                    ans = curr;
                }
            }
        }
        return ans;
    }

    void f(int curr){
        seen[curr] = true;
        count++;
        for(int i = head[curr],v; i>0;i=next[i]){
            v = to[i];
            if(!seen[v])f(v);
        }
    }

    void insert(int u, int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }

    void build(){
        cnt = 1;
        for (int i = 0; i < n; i++) {
            head[i] = 0;
        }
    }
}